//@version=5

signal_length = input(11)
sma_signal = true 


lin_reg = true
linreg_length = input(9)

bopen = lin_reg ? ta.linreg(open, linreg_length, 0) : open
bhigh = lin_reg ? ta.linreg(high, linreg_length, 0) : high
blow = lin_reg ? ta.linreg(low, linreg_length, 0) : low
bclose = lin_reg ? ta.linreg(close, linreg_length, 0) : close

strategy('My Strategy', overlay = true)
asma(source, length) =>
    sum = 0.0
    for i = 0 to length - 1
        sum += source[i] / length
    sum
d = input(31)
c = input(6)
e = input(27)
f = input(61)

longCondition = ta.crossover(asma(bclose, d), asma(bclose, c))

shortCondition = ta.crossunder(ta.sma(bclose, e), ta.sma(bclose, f))

// Stochastic oscillator parameters
ss = input(27) 
bbclose = lin_reg ? ta.linreg(close, ss, 0) : close

// Calculating the stochastic oscillator
k = ta.stoch(bbclose, high, low, input(19))

// Overbought and oversold thresholds
overbought = input(1)
oversold = input(56)

// Buy and sell conditions based on stochastic oscillator
stochLongCondition = k < oversold
stochShortCondition = k > overbought

// Integrating stochastic conditions with existing strategy conditions
longCondition := longCondition and stochLongCondition
shortCondition := shortCondition and stochShortCondition


if (shortCondition)
    strategy.entry('Buy', strategy.long )


if (longCondition)
    strategy.entry('Sell', strategy.short )

length = input(10)
highestHigh = ta.highest(high, length)
lowestLow = ta.lowest(low, length)
rangee = highestHigh - lowestLow
trueRange = math.max(math.abs(high - low), math.abs(high - bbclose[1]), math.abs(low - bbclose[1]))
averageTrueRange = ta.sma(trueRange, length)

// Entry conditions
// Take profit condition
takeProfitLevel = close + averageTrueRange * input(3) // This is just an example, adjust as needed
strategy.exit("Take Profit", "Buy", limit=takeProfitLevel)
takeProfitLevele = close - averageTrueRange * input(3) // This is just an example, adjust as needed
strategy.exit("Take Profit", "Sell", limit=takeProfitLevele)

lengthi = input.int(14, minval=1)
OverBought = input(80)
OverSold = input(20)
smoothK = 3
smoothD = 3
ki = ta.sma(ta.stoch(close, high, low, lengthi), smoothK)
di = ta.sma(ki, smoothD)
co = ta.crossover(ki,di)
cu = ta.crossunder(ki,di)
if (not na(ki) and not na(di))
	if (co and ki < OverSold)
		strategy.entry("StochLE", strategy.long, comment="StochLE")
	if (cu and ki > OverBought)
		strategy.entry("StochSE", strategy.short, comment="StochSE")
