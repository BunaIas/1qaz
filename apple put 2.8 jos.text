//@version=5

signal_length = input(11)
sma_signal = true 

fixedVolume =  input(100000)
scaleFactor =  volume / ta.sma(volume  / input.int(2), input(40)) // Adjust the period of the SMA as needed

// Use the scaleFactor to determine the quantity for the strategy entry
entryQuantity = (scaleFactor *  fixedVolume)


lin_reg = true
linreg_length = input(6)

bopen = lin_reg ? ta.linreg(open, linreg_length, 0) : open
bhigh = lin_reg ? ta.linreg(high, linreg_length, 0) : high
blow = lin_reg ? ta.linreg(low, linreg_length, 0) : low
bclose = lin_reg ? ta.linreg(close, linreg_length, 0) : close

strategy('My Strategy', overlay = true)
asma(source, length) =>
    sum = 0.0
    for i = 0 to length - 1
        sum += source[i] / length
    sum
d = input(27)
c = input(6)
e = input(18)
f = input(32)

longCondition = ta.crossover(asma(bclose, d), asma(bclose, c))

shortCondition = ta.crossunder(ta.sma(bclose, e), ta.sma(bclose, f))

// Stochastic oscillator parameters
ss = input(11) 
bbclose = lin_reg ? ta.linreg(close, ss, 0) : close

// Calculating the stochastic oscillator
k = ta.stoch(bbclose, high, low, input(4))

// Overbought and oversold thresholds
overbought = input(9)
oversold = input(61)

// Buy and sell conditions based on stochastic oscillator
stochLongCondition = k < oversold
stochShortCondition = k > overbought

// Integrating stochastic conditions with existing strategy conditions
longCondition := longCondition and stochLongCondition
shortCondition := shortCondition and stochShortCondition

// Inputs
fvgTH = input(2.9)
fvgBC = input(color.new(#089981,  55), title="Bullish, Imbalance")
fvgAC = input(color.new(#787b86,  77), title="Mitigation")
fvgSC = input(color.new(#f23645,  55), title="Bearish, Imbalance")
fvgFC = input(color.new(#787b86,  77), title="Mitigation")
fvgPR = input(true, title="Display Percentage of Mitigation")
fvgVF = input(true, title="Historical Fair Value Gaps")

// Calculate ATR
atr = ta.atr(144) * fvgTH

// Main logic
bullG = close > open[1]
bearG = high < low[1]
bull = (low - high[2]) > atr and low > high[2] and close[1] > high[2] and not (bullG or bullG[1])
bear = (low[2] - high) > atr and high < low[2] and close[1] < low[2] and not (bearG or bearG[1])

if bull
    box.new(bar_index[1], low, bar_index, high[2], na, bgcolor=fvgBC)
    box.new(bar_index[1], low, bar_index, low, na, bgcolor=fvgAC)
    line.new(bar_index[1], high[2], bar_index, high[2], color=fvgBC, width=2)
else if bear
    box.new(bar_index[1], low[2], bar_index, high, na, bgcolor=fvgSC)
    box.new(bar_index[1], high, bar_index, high, na, bgcolor=fvgFC)
    line.new(bar_index[1], low[2], bar_index, low[2], color=fvgSC, width=2)


l = 0
if bear or bull
    l:= 1

if (shortCondition or  bear  )
    strategy.entry('Buy', strategy.long , qty = entryQuantity)



if (longCondition or bull  )
    strategy.entry('Sell', strategy.short, qty = entryQuantity)
